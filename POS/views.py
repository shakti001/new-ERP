from django.shortcuts import render
from rest_framework import viewsets , permissions , serializers
from url_filter.integrations.drf import DjangoFilterBackend
from .serializers import *
from API.permissions import *
from rest_framework.views import APIView
from rest_framework.renderers import JSONRenderer
from django.http import HttpResponse
from datetime  import datetime, timedelta
import json
import pytz
from .models import *
# Create your views here.
from reportlab import *
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4,A6,A1,landscape
from reportlab.lib.units import cm, mm
from reportlab.lib import colors , utils
from reportlab.platypus import Paragraph, Table, TableStyle, Image, Frame, Spacer, PageBreak, BaseDocTemplate, PageTemplate, SimpleDocTemplate, Flowable
from PIL import Image
from reportlab.lib.styles import ParagraphStyle, getSampleStyleSheet, TA_CENTER
from reportlab.graphics import barcode , renderPDF
from reportlab.graphics.shapes import *
from reportlab.graphics.barcode.qr import QrCodeWidget
from rest_framework.views import APIView
from rest_framework.renderers import JSONRenderer
from django.http import HttpResponse
import datetime
import json
import pytz
import requests
from django.template.loader import render_to_string, get_template
from django.core.mail import send_mail, EmailMessage
from openpyxl import load_workbook
from io import BytesIO
import re
from rest_framework import filters
import ast
from django.db.models import F ,Value,CharField,Q
from ecommerce.models import *
from POS.models import *



class GenericPincodeViewSet(viewsets.ModelViewSet):
    permission_classes = (permissions.AllowAny ,)
    # queryset = GenericPincode.objects.all()
    serializer_class = genericPincodeSerializer
    filter_backends = [DjangoFilterBackend]
    filter_fields = ['pincode','state','city']
    def get_queryset(self):
        toReturn = GenericPincode.objects.all()
        if 'pincode' in self.request.GET:
            toReturn = toReturn.filter(pincode__iexact=self.request.GET['pincode'])
        return toReturn

class ProductMetaViewSet(viewsets.ModelViewSet):
    permission_classes = (permissions.IsAuthenticatedOrReadOnly , )
    serializer_class = ProductMetaSerializer
    filter_backends = [DjangoFilterBackend]
    filter_fields = ['description', 'code']
    def get_queryset(self):
        return ProductMeta.objects.all()

class FiltersViewSet(viewsets.ModelViewSet):
    permission_classes = (permissions.IsAuthenticatedOrReadOnly , )
    queryset = Filter.objects.all()
    serializer_class = FilterSerializer
    filter_backends = [DjangoFilterBackend]
    filter_fields = ['name', 'parent']


class StoreViewSet(viewsets.ModelViewSet):
    permission_classes = (permissions.AllowAny, )
    serializer_class = StoreSerializer
    # queryset = Store.objects.all()
    filter_backends = [DjangoFilterBackend]
    filter_fields = ['name' ]
    def get_queryset(self):
        toReturn = Store.objects.all()
        if 'sort' in self.request.GET:
            posSort =  self.request.GET['sort']
            toReturn = toReturn.order_by(posSort)

        return toReturn




themeColor = colors.HexColor('#227daa')

styles=getSampleStyleSheet()
styleN = styles['Normal']
styleH = styles['Heading1']

try:
    settingsFields = application.objects.get(name = 'app.public.ecommerce').settings.all()
except:
    print "ERROR : settingsFields = application.objects.get(name = 'app.public.ecommerce').settings.all()"

class expanseReportHead(Flowable):

    def __init__(self, request , invoice):
        Flowable.__init__(self)
        self.req = request
        self.invoice = invoice
    #----------------------------------------------------------------------
    def draw(self):
        """
        draw the floable
        """
        # print self.invoice.status
        now = datetime.datetime.now(pytz.timezone('Asia/Kolkata'))
        # print self.invoice.status
        # if self.invoice.status in ['quoted']:
        #     docTitle = 'SALES QUOTATION'
        # else:
        docTitle = 'TAX INVOICE'

        passKey = '%s%s'%(str(self.req.user.date_joined.year) , self.req.user.pk) # also the user ID
        docID = '%s%s' %( now.year , self.invoice.pk)


        pSrc = '''
        <font size=14>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<u>%s</u></font><br/><br/><br/>
        <font size=9>
        <strong>Generated by:</strong> %s<br/>
        <strong>On:</strong> %s<br/><br/>
        <strong>Document ID:</strong> %s<br/><br/>
        </font>
        ''' % ( docTitle , '%s %s (%s)' %(self.req.user.first_name ,self.req.user.last_name , passKey )  , now.strftime("%d-%B-%Y - %H:%M:%S") , docID)

        story = []
        head = Paragraph(pSrc , styleN)
        head.wrapOn(self.canv , 200*mm, 50*mm)
        head.drawOn(self.canv , 0*mm, -10*mm)

        # barcode_value = "1234567890"
        # barcode39 = barcode.createBarcodeDrawing('EAN13', value = barcode_value,barWidth=0.3*mm,barHeight=10*mm)
        #
        # barcode39.drawOn(self.canv,160*mm,0*mm)
        # self.canv.drawImage(os.path.join(BASE_DIR , 'logo.png') , 80*mm , 0*mm , 2*cm, 2*cm)

def addPageNumber(canvas, doc):
    """
    Add the page number
    """
    # print doc.invoice
    now = datetime.datetime.now(pytz.timezone('Asia/Kolkata'))
    passKey = '%s%s'%(str(doc.request.user.date_joined.year) , doc.request.user.pk) # also the user ID
    docID = '%s%s' %( now.year , doc.invoice.pk)

    # qrw = QrCodeWidget('http://cioc.co.in/documents?id=%s&passkey=%s&app=crmInvoice' %(docID , passKey))
    if doc.invoice.barCVal:
        qrw = QrCodeWidget(doc.invoice.barCVal)
    else:
        qrw = QrCodeWidget('NoBarcode')
    b = qrw.getBounds()

    w=b[2]-b[0]
    h=b[3]-b[1]

    d = Drawing(60,60,transform=[60./w,0,0,60./h,0,0])
    # d.add(qrw)
    renderPDF.draw(d, canvas ,180*mm,270*mm)

    pass

    # page_num = canvas.getPageNumber()
    # text = "<font size='8'>Page #%s</font>" % page_num
    # p = Paragraph(text , styleN)
    # p.wrapOn(canvas , 50*mm , 10*mm)
    # p.drawOn(canvas , 100*mm , 10*mm)



class PageNumCanvas(canvas.Canvas):

    #----------------------------------------------------------------------
    def __init__(self, *args, **kwargs):
        """Constructor"""
        canvas.Canvas.__init__(self, *args, **kwargs)
        self.pages = []

    #----------------------------------------------------------------------
    def showPage(self):
        """
        On a page break, add information to the list
        """
        self.pages.append(dict(self.__dict__))
        self._startPage()

    #----------------------------------------------------------------------
    def save(self):
        """
        Add the page number to each page (page x of y)
        """
        page_count = len(self.pages)

        for page in self.pages:
            self.__dict__.update(page)
            # self.draw_page_number(page_count)
            self.drawLetterHeadFooter()
            canvas.Canvas.showPage(self)

        canvas.Canvas.save(self)


    #----------------------------------------------------------------------
    def draw_page_number(self, page_count):
        """
        Add the page number
        """

        text = "<font size='8'>Page #%s of %s</font>" % (self._pageNumber , page_count)
        p = Paragraph(text , styleN)
        p.wrapOn(self , 50*mm , 10*mm)
        p.drawOn(self , 100*mm , 10*mm)

    def drawLetterHeadFooter(self):
        self.setStrokeColor(themeColor)
        self.setFillColor(themeColor)
        self.rect(0,0,1500,70, fill=True)
        # print dir(self)
        compNameStyle = styleN.clone('footerCompanyName')
        compNameStyle.textColor = colors.white;

        p = Paragraph(settingsFields.get(name = 'companyName').value , compNameStyle)
        p.wrapOn(self , 50*mm , 10*mm)
        p.drawOn(self , 85*mm  , 18*mm)

        p1 = Paragraph(settingsFields.get(name = 'companyAddress').value , compNameStyle)
        p1.wrapOn(self , 150*mm , 10*mm)
        p1.drawOn(self , 55*mm  , 10*mm)


        p2 = Paragraph( settingsFields.get(name = 'contactDetails').value, compNameStyle)
        p2.wrapOn(self , 200*mm , 10*mm)
        p2.drawOn(self , 40*mm  , 4*mm)

        from svglib.svglib import svg2rlg
        drawing = svg2rlg(os.path.join(globalSettings.BASE_DIR , 'static_shared','images' , 'company_icon.svg'))
        sx=sy=0.5
        drawing.width,drawing.height = drawing.minWidth()*sx, drawing.height*sy
        drawing.scale(sx,sy)
        #if you want to see the box around the image
        # drawing._showBoundary = True
        renderPDF.draw(drawing, self,10*mm  , self._pagesize[1]-20*mm)

        #width = self._pagesize[0]
        # page = "Page %s of %s" % (, page_count)
        # self.setFont("Helvetica", 9)
        # self.drawRightString(195*mm, 272*mm, page)





def genInvoice(response , invoice, request):


    MARGIN_SIZE = 8 * mm
    PAGE_SIZE = A4

    # c = canvas.Canvas("hello.pdf")
    # c.drawString(9*cm, 19*cm, "Hello World!")

    pdf_doc = SimpleDocTemplate(response, pagesize = PAGE_SIZE,
        leftMargin = MARGIN_SIZE, rightMargin = MARGIN_SIZE,
        topMargin = 4*MARGIN_SIZE, bottomMargin = 3*MARGIN_SIZE)

    # data = [['', '', '', 'Grand Total', '' , pFooterGrandTotal]]

    pdf_doc.invoice = invoice
    pdf_doc.request = request

    tableHeaderStyle = styles['Normal'].clone('tableHeaderStyle')
    tableHeaderStyle.textColor = colors.white;
    tableHeaderStyle.fontSize = 7

    pHeadProd = Paragraph('<strong>Product /<br/>Service</strong>' , tableHeaderStyle)
    pHeadDetails = Paragraph('<strong>Details</strong>' , tableHeaderStyle)
    pHeadTaxCode = Paragraph('<strong>HSN / SAC</strong>' , tableHeaderStyle)
    pHeadPrice = Paragraph('<strong>Rate</strong>' , tableHeaderStyle)
    pHeadQty = Paragraph('<strong>Qty</strong>' , tableHeaderStyle)
    # pHeadTotal = Paragraph('<strong>Total</strong>' , tableHeaderStyle)
    # pHeadTotalPrice  = Paragraph('<strong>Total Price</strong>' , tableHeaderStyle)
    pHeadsubTotalTax = Paragraph('<strong>IGST / Tax</strong>' , tableHeaderStyle)
    pHeadsubTotal = Paragraph('<strong>Sub Total</strong>' , tableHeaderStyle)

    # # bookingTotal , bookingHrs = getBookingAmount(o)
    #
    # pFooterQty = Paragraph('%s' % ('o.quantity') , styles['Normal'])
    # pFooterTax = Paragraph('%s' %('tax') , styles['Normal'])
    # pFooterTotal = Paragraph('%s' % (1090) , styles['Normal'])
    # pFooterGrandTotal = Paragraph('%s' % ('INR 150') , tableHeaderStyle)

    if invoice.customer is not None:
        data = [[ pHeadProd, pHeadDetails, pHeadTaxCode, pHeadPrice , pHeadQty,pHeadsubTotalTax,pHeadsubTotal ]]
    else:
        data = [[ pHeadDetails, pHeadQty, pHeadPrice ,pHeadsubTotal ]]


    totalQuant = 0
    totalTax = 0
    grandTotal = 0
    tableBodyStyle = styles['Normal'].clone('tableBodyStyle')
    tableBodyStyle.fontSize = 7

    for i in json.loads(invoice.products):
        print '***********',i
        if i['data']['productVariant']:
            # print i['data']['productVariant'],'@@@@@@@@@@@@@@@@@@@@@@'
            price = i['data']['productVariant']['price']
        else:
            price = i['data']['product']['price']

        pDescSrc = i['data']['name']

        totalQuant += i['quantity']

        #
        # if 'price' not in i:
        #     print "Continuing"
        #     continue

        i['subTotalTax'] = price * i['quantity'] * ( i['data']['product']['productMeta']['taxRate']/float(100)) if i['data']['product']['productMeta'] and  i['data']['product']['productMeta']['taxRate'] else 0

        i['subTotal'] = price * i['quantity'] + i['subTotalTax']

        totalTax += i['subTotalTax']
        grandTotal += i['subTotal']
        if  i['data']['product']['productMeta'] and i['data']['product']['productMeta']['code'] and i['data']['product']['productMeta']['taxRate']:
            taxCode = '%s(%s %%)' %(i['data']['product']['productMeta']['code'] , i['data']['product']['productMeta']['taxRate'])
        else:
            taxCode = ''

        pBodyProd = Paragraph('Service' if i['data']['product']['productMeta'] and i['data']['product']['productMeta']['typ'] == 'SAC' else 'Product' , tableBodyStyle)
        pBodyTitle = Paragraph( pDescSrc , tableBodyStyle)
        pBodyTaxCode = Paragraph(taxCode , tableBodyStyle)
        if invoice.customer is not None:
            pBodyPrice = Paragraph(str(price) , tableBodyStyle)
        else:
            pBodyPrice = Paragraph(str(price + (price * i['data']['product']['productMeta']['taxRate']/float(100) if i['data']['product']['productMeta'] and  i['data']['product']['productMeta']['taxRate'] else 0)) , tableBodyStyle)
        pBodyQty = Paragraph(str(i['quantity']) , tableBodyStyle)
        # pBodyTotal = Paragraph(str(i['quantity']*i['data']['price']) , tableBodyStyle)
        pBodysubTotalTax = Paragraph(str(round(i['subTotalTax'],2)) , tableBodyStyle)
        pBodySubTotal = Paragraph(str(round(i['subTotal'],2)) , tableBodyStyle)

        if invoice.customer is not None:
            data.append([pBodyProd, pBodyTitle,pBodyTaxCode, pBodyPrice, pBodyQty, pBodysubTotalTax , pBodySubTotal])
        else:
            data.append([pBodyTitle, pBodyQty, pBodyPrice, pBodySubTotal])

    invoice.subTotal = grandTotal
    # invoice.saveInvoiceForm()

    tableGrandStyle = tableHeaderStyle.clone('tableGrandStyle')
    tableGrandStyle.fontSize = 10

    if invoice.customer is not None:
        data += [['', '','','', '',Paragraph(str(round(totalTax,2)) , tableBodyStyle)  , Paragraph(str(round(grandTotal,2)) , tableBodyStyle) ],
                ['', '', '', '',  Paragraph('Total (INR)' , tableGrandStyle), '', Paragraph(str(round(grandTotal,2)) , tableGrandStyle)]]
    else:
        data += [['',Paragraph('Total (INR)' , tableGrandStyle), '', Paragraph(str(round(grandTotal,2)) , tableGrandStyle)]]

    t=Table(data)

    if invoice.customer is not None:
        ts = TableStyle([('ALIGN',(1,1),(-3,-3),'RIGHT'),
                    ('VALIGN',(0,1),(-1,-3),'TOP'),
                    ('VALIGN',(0,-2),(-1,-2),'TOP'),
                    ('VALIGN',(0,-1),(-1,-1),'TOP'),
                    ('SPAN',(-3,-1),(-2,-1)),
                    ('TEXTCOLOR',(0,0),(-1,0) , colors.white),
                    ('BACKGROUND',(0,0),(-1,0) , themeColor),
                    ('LINEABOVE',(0,0),(-1,0),0.25,themeColor),
                    ('LINEABOVE',(0,1),(-1,1),0.25,themeColor),
                    ('BACKGROUND',(-2,-2),(-1,-2) , colors.HexColor('#eeeeee')),
                    ('BACKGROUND',(-3,-1),(-1,-1) , themeColor),
                    ('LINEABOVE',(-2,-2),(-1,-2),0.25,colors.gray),
                    ('LINEABOVE',(0,-1),(-1,-1),0.25,colors.gray),
                    # ('LINEBELOW',(0,-1),(-1,-1),0.25,colors.gray),
                ])
        t.setStyle(ts)
        t._argW[0] = 1.5*cm
        t._argW[1] = 6*cm
        t._argW[2] = 2.7*cm
        t._argW[3] = 2.3*cm
        t._argW[4] = 1.8*cm
        t._argW[5] = 2.5*cm
        t._argW[6] = 3*cm
    else:
        ts = TableStyle([('ALIGN',(1,1),(-3,-3),'RIGHT'),
                    ('VALIGN',(0,1),(-1,-3),'TOP'),
                    ('VALIGN',(0,-2),(-1,-2),'TOP'),
                    ('VALIGN',(0,-1),(-1,-1),'TOP'),
                    ('SPAN',(-3,-1),(-2,-1)),
                    ('TEXTCOLOR',(0,0),(-1,0) , colors.white),
                    ('BACKGROUND',(0,0),(-1,0) , themeColor),
                    ('LINEABOVE',(0,0),(-1,0),0.25,themeColor),
                    ('LINEABOVE',(0,1),(-1,1),0.25,themeColor),
                    # ('BACKGROUND',(-2,-2),(-1,-2) , colors.HexColor('#eeeeee')),
                    ('BACKGROUND',(-3,-1),(-1,-1) , themeColor),
                    # ('LINEABOVE',(-2,-2),(-1,-2),0.25,colors.gray),
                    ('LINEABOVE',(0,-1),(-1,-1),0.25,colors.gray),
                    # ('LINEBELOW',(0,-1),(-1,-1),0.25,colors.gray),
                ])
        t.setStyle(ts)
        t._argW[0] = 8*cm
        t._argW[1] = 3*cm
        t._argW[2] = 4*cm
        t._argW[3] = 5*cm


    story = []

    expHead = expanseReportHead(request , invoice)
    story.append(Spacer(2.5,2*cm))
    story.append(expHead)
    story.append(Spacer(2.5,0.75*cm))

    adrs = invoice.customer
    print '***********',invoice.customer
    if invoice.customer is not None:
        if invoice.customer.gst is None:
            tin = 'NA'
        else:
            tin = invoice.customer.gst

        summryParaSrc = """
        <font size='11'><strong>Customer details :</strong></font> <br/><br/>
        <font size='9'>
        %s<br/>
        %s<br/>
        %s<br/>
        %s<br/>
        %s , %s<br/>
        %s<br/>
        <strong>GSTIN : </strong>%s<br/>
        </font>
        """ %(invoice.customer.name , invoice.customer.company , invoice.customer.street , invoice.customer.city ,invoice.customer.state , invoice.customer.pincode , invoice.customer.country , tin)
    else:
        summryParaSrc = ''
    story.append(Paragraph(summryParaSrc , styleN))
    story.append(t)
    story.append(Spacer(2.5,0.5*cm))

    pdf_doc.build(story,onFirstPage=addPageNumber, onLaterPages=addPageNumber, canvasmaker=PageNumCanvas)

from datetime import datetime,timedelta
from django.db.models import Sum
class SalesGraphAPIView(APIView):
    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.AllowAny ,)
    # permission_classes = (permissions.IsAuthenticated ,)
    def post(self , request , format = None):
        print "---------------------------------------\n"
        if "date" in request.data:
            # one day sale
            d = datetime.datetime.strptime(request.data["date"], '%Y-%m-%dT%H:%M:%S.%fZ')
            print d,'dateeeeeeeeeeeeeeee'
            invcs = Invoice.objects.filter(invoicedate = d)
            custs = Customer.objects.filter(created__range = (datetime.datetime.combine(d, datetime.time.min), datetime.datetime.combine(d, datetime.time.max)))

        else:
            frm = datetime.datetime.strptime(request.data["from"], '%Y-%m-%dT%H:%M:%S.%fZ')
            to = datetime.datetime.strptime(request.data["to"], '%Y-%m-%dT%H:%M:%S.%fZ')
            invcs = Invoice.objects.filter(invoicedate__range=(datetime.datetime.combine(frm, datetime.time.min), datetime.datetime.combine(to, datetime.time.max)))
            custs = Customer.objects.filter(created__range = (datetime.datetime.combine(frm, datetime.time.min), datetime.datetime.combine(to, datetime.time.max)))

        totalSales = invcs.aggregate(Sum('grandTotal'))  if invcs.count() > 0 else {'grandTotal__sum':0}
        totalCollections = invcs.aggregate(Sum('amountRecieved'))  if invcs.count() > 0 else {'amountRecieved__sum':0}
        print type(totalSales),type(totalCollections),'kkkk'
        if 'grandTotal__sum' in totalSales and type(totalSales['grandTotal__sum']) == float:
            totalSales['grandTotal__sum'] = round(totalSales['grandTotal__sum'],2)
        if 'amountRecieved__sum' in totalCollections and type(totalCollections['amountRecieved__sum']) == float:
            totalCollections['amountRecieved__sum'] = round(totalCollections['amountRecieved__sum'],2)

        sales =  invcs.count()
        custCount = custs.count()


        last_month = datetime.datetime.now() - timedelta(days=30)

        data = (Invoice.objects.all()
            .extra(select={'created': 'date(created)'})
            .values('created')
            .annotate(sum=Sum('grandTotal')))

        print data

        return Response({"totalSales" : totalSales , "totalCollections" : totalCollections ,  "sales" : sales , "custCount" : custCount , "trend" : data},status=status.HTTP_200_OK)


class ExternalSalesGraphAPIView(APIView):
    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.AllowAny ,)
    # permission_classes = (permissions.IsAuthenticated ,)
    def post(self , request , format = None):
        print "---------------------------------------\n"
        if "date" in request.data:
            # one day sale
            d = datetime.datetime.strptime(request.data["date"], '%Y-%m-%dT%H:%M:%S.%fZ')

            invcs = ExternalOrders.objects.filter(created__range = (datetime.datetime.combine(d, datetime.time.min), datetime.datetime.combine(d, datetime.time.max)))

        else:
            frm = datetime.datetime.strptime(request.data["from"], '%Y-%m-%dT%H:%M:%S.%fZ')
            to = datetime.datetime.strptime(request.data["to"], '%Y-%m-%dT%H:%M:%S.%fZ')
            invcs = ExternalOrders.objects.filter(created__range=(frm, to))

        print invcs
        last_month = datetime.datetime.now() - timedelta(days=30)

        data = (invcs
            .extra(select={'created': 'date(created)' })
            .values('created' , 'marketPlace' )
            )

        print data

        return Response({"amazon" : 0 , "flipkart" : 0 ,  "skinstore" : 0, "trend" : data},status=status.HTTP_200_OK)


from django.db.models import Max
class GetNextAvailableInvoiceIDAPIView(APIView):
    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.IsAuthenticated ,)
    def get(self , request , format = None):
        # id__max is None if there are no Posts in the database
        id_max = Invoice.objects.all().aggregate(Max('id'))['id__max']
        id_next = id_max + 1 if id_max else 1

        return Response({"pk" : id_next},status=status.HTTP_200_OK)


from BeautifulSoup import BeautifulSoup as bs
# import pandas as pd
import re

class ExternalEmailOrders(APIView):
    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.AllowAny ,)
    def post(self , request , format = None):
        # print request.data
        print '--------------------'
        if 'html' not in request.data: # then its a flipkart order
            sku = request.data['sku']
            orderID = request.data['orderId']
            qty = request.data['quantity']
            price = request.data['price']
            p = None
            try:
                p = Product.objects.get(serialNo__iexact = sku)
            except:
                try:
                    ps = ProductVerient.object.get(sku__iexact = sku)
                    p = ps.parent
                except:
                    pass
            finally:
                if p == None:
                    return Response(status=status.HTTP_404_NOT_FOUND)

            eo = ExternalOrders(marketPlace= 'flipkart' , orderID = orderID , status = 'new' , buyersPrice = price )

            try:
                eo.save()
            except:
                eo = ExternalOrders.objects.get(marketPlace= 'flipkart' , orderID = orderID)

            prodMap = ExternalOrdersQtyMap(product = p , qty = qty)
            prodMap.save()
            eo.products.add(prodMap)
            il = InventoryLog(typ = 'system', product = p , before =  p.inStock , after = p.inStock - int(qty) , externalOrder = eo )

            try:
                il.save()

                p.inStock -= int(qty)
                p.save()
            except:
                pass

            return Response(status=status.HTTP_200_OK)


        body = request.data['html']
        subject = request.data['subject'].lower()
        seller = None
        if 'flipkart' in body.lower():
            seller = 'flipkart'
        if 'amazon' in body.lower():
            seller = 'amazon'
        if 'theskinstore.in' in body.lower() and 'ship now' not in subject:
            seller = 'skinstore'

        if 'amazon' in seller.lower() and 'ship now' not in subject:
            return Response(status=status.HTTP_200_OK)



        print '----------------------\n\n'
        print "Subject : ", subject
        print "seller : ", seller , '\n'
        # print "Body : ", body, '\n'
        typ = None
        soup = bs(body)




        tables = soup.findAll("table")
        print len(tables)

        if seller == 'amazon':
            if 'refund for order' in subject:
                typ = 'return'
            if 'ship now' in subject:
                typ = 'new'
            if 'has dispatched the item you sold' in subject:
                typ = 'shipped'

        if seller == 'skinstore':
            if 'thank you for shopping' in body.lower():
                typ = 'new'
            if 'your order status has been' in subject.lower():
                typ = 'statusChange'

        if seller == 'amazon':
            if typ == 'new':
                sku = body[body.index('SKU:')+4: body.index('Quantity:')].replace('<br>' , '').strip()

                qty = body[body.index('Quantity:')+9: body.index('Order date:')].replace('<br>' , '').strip()

                price = body[body.index(' price:')+7:].split('<br>')[0].replace('INR ' , '').strip()



                orderID = body[body.index('Order ID:')+9:].split('<br>')[0].strip()


                print "sku : " , sku , " Qty : " , qty , " orderID : " , orderID , " price : " , price

                p = None
                try:
                    p = Product.objects.get(serialNo__iexact = sku)
                except:
                    try:
                        ps = ProductVerient.object.get(sku__iexact = sku)
                        p = ps.parent
                    except:
                        pass
                finally:
                    print "sku : " , sku
                    if p == None:
                        return Response(status=status.HTTP_404_NOT_FOUND)

                eo = ExternalOrders(marketPlace= 'amazon' , orderID = orderID , status = 'new' , buyersPrice = price )

                try:
                    eo.save()
                except:
                    eo = ExternalOrders.objects.get(marketPlace= 'amazon' , orderID = orderID)

                prodMap = ExternalOrdersQtyMap(product = p , qty = qty)
                prodMap.save()
                eo.products.add(prodMap)
                il = InventoryLog(typ = 'system', product = p , before =  p.inStock , after = p.inStock - int(qty) , externalOrder = eo )

                try:
                    il.save()
                    p.inStock -= int(qty)
                    p.save()
                except:
                    pass





        if seller == 'skinstore':
            if typ == 'new':
                tbl = soup.findAll('table', attrs={'bgcolor': '#c0b475'})[0]
                t = pd.read_html(str(tbl))[0]
                print t

                orderID = body.split('Your Order ID : <span style="color:#000">')[1].split('</span>')[0]

                eo = ExternalOrders(marketPlace= 'skinstore' , orderID = orderID , status = 'new' )
                print eo
                try:
                    eo.save()
                except:
                    eo = ExternalOrders.objects.get(marketPlace= 'skinstore' , orderID = orderID)

                for index, row in t.iterrows():
                    if index == 0:
                        continue
                    sku = row[2]
                    qty = row[3]
                    if isinstance(sku , str):
                        print sku , qty
                        p = None
                        try:
                            p = Product.objects.get(serialNo__iexact = sku)
                        except:
                            try:
                                ps = ProductVerient.object.get(sku__iexact = sku)
                                p = ps.parent
                            except:
                                pass
                        finally:
                            if p == None:
                                return Response(status=status.HTTP_404_NOT_FOUND)

                        prodMap = ExternalOrdersQtyMap(product = p , qty = qty)
                        prodMap.save()
                        eo.products.add(prodMap)
                        il = InventoryLog(typ = 'system', product = p , before =  p.inStock , after = p.inStock - int(qty) , externalOrder = eo )
                        try:
                            il.save()
                            p.inStock -= int(qty)
                            p.save()
                        except:
                            pass


                    else:
                        break


                print orderID


        # for table in tables:
        #      if table.findParent("table") is None:
        #
        #
        #         if seller == 'flipkart':
        #             if 'flipkart return initiated' in subject:
        #                 typ = 'rto'
        #             if 'new flipkart order' in subject:
        #                 typ = 'new'
        #
        #         print "Type : " , typ , "Seller : " , seller
        #         try:
        #             t = pd.read_html(str(table))[0]
        #         except:
        #             t = None
        #         if t is not None and t.shape[0] >1:
        #             if seller == 'amazon':
        #                 if typ == 'return' and 'order items' in t[0][0].lower() and 'refund reason' in t[1][0].lower():
        #                     reason = t[1][1]
        #                     items = t[0][1]
        #                     if 'of' in items:
        #                         items = items[items.index('of')+2:]
        #
        #                     print reason , items
        #             if seller == 'flipkart':
        #                 if typ == 'new':
        #                     sku = t[3][1]
        #                     qty = t[4][1]
        #                     orderID = t[0][1]
        #                     price = t[5][1].replace('Rs.' , '').strip()
        #
        #                     print "sku : " , sku , " Qty : " , qty , " orderID : " , orderID , " price : " , price
        #
        #                     p = Product.objects.get(serialNo = sku)
        #                     p.inStock -= int(qty)
        #
        #                     p.save()
                    # print t , t.__class__ , typ


                        # reg = "(?<=%s).*?(?=%s)" % ('Item','<br>')
                        # print re.match(reg, body)


        # print dir(request)
        # print dir(request.FILES['attachment'])
        # print request.FILES['attachment'].size
        return Response({"saved" : True},status=status.HTTP_200_OK)


class ProductInventoryAPIView(APIView):
    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.AllowAny ,)
    def get(self , request , format = None):

        print 'cameeeeeeeeeeeee',request.GET
        if 'offset' in request.GET:
            offset = int(request.GET['offset'])
        if 'limit' in request.GET:
            limit = offset + int(request.GET['limit'])

        toReturn = []
        if 'store' in request.GET:
            storeQtyObj = StoreQty.objects.filter(store=request.GET['store'])
            if 'search' in request.GET:
                storeQtyObj = storeQtyObj.filter(product__name__icontains=request.GET['search'])
        elif 'master' in request.GET:
            storeQtyObj = StoreQty.objects.filter(master=True)
            if 'search' in request.GET:
                storeQtyObj = storeQtyObj.filter(product__name__icontains=request.GET['search'])
        else:
            storeQtyObj = StoreQty.objects.all()


        productsList = list(storeQtyObj.values('product').distinct().values('product__pk','product__name','product__displayPicture','product__unit','product__serialId','product__price','product__discount','product__displayPicture'))

        for i in productsList:
            try:
                dp = '/media/'+i['product__displayPicture']
                print 'image path :', dp
            except:
                dp = ''
            # if i['product__displayPicture']:
            # else:
            #     try:
            #         lsObj = listing.objects.filter(product=int(i['product__pk']))
            #         if len(lsObj)>0:
            #             fs = lsObj[0].files.all()
            #             if len(fs)>0:
            #                 d = fs[0].attachment
            #                 dp = d.url
            #             else:
            #                 dp = None
            #         else:
            #             dp = None
            #     except:
            #         dp = None
            # print dp,'dpppppppppp'
            data = list(storeQtyObj.filter(product=i['product__pk']).values('pk','product','product__price','product__discount','product__howMuch','productVariant','productVariant__sku','productVariant__unitPerpack','productVariant__unit','product__serialNo','product__unit','quantity','productVariant__price' ,'productVariant__serialId' , 'productVariant__discount' ,'productVariant__prodImage'))
            # data.append(dp)
            toReturn.append({'productPk':i['product__pk'],'productName':i['product__name'],'productUnit':i['product__unit'],'productSerialId':i['product__serialId'],'productdp':dp,'productPrice':i['product__price'],'productDiscount':i['product__discount'],'data':data})

        print "helooooooo",toReturn
        if 'limit' in request.GET:
            toReturn = toReturn[offset : limit]
        else:
            toReturn = toReturn
        return Response(toReturn,status=status.HTTP_200_OK)


class InvoicePrint(APIView):
    renderer_classes = (JSONRenderer,)
    def get(self , request , format = None):
        if 'invoice' not in request.GET:
            return Response(status=status.HTTP_400_BAD_REQUEST)

        response = HttpResponse(content_type='application/pdf')
        print request.GET['invoice']
        o = Invoice.objects.get(id = request.GET['invoice'])
        response['Content-Disposition'] = 'attachment; filename="invoicedownload%s%s.pdf"' %( datetime.datetime.now(pytz.timezone('Asia/Kolkata')).year , o.pk)
        genInvoice(response , o , request)
        # f = open('./media_root/invoicedownload%s%s.pdf'%(o.pk, o.status) , 'wb')
        # f.write(response.content)
        # f.close()
        if 'saveOnly' in request.GET:
            return Response(status=status.HTTP_200_OK)
        return response





from excel_response import ExcelResponse
class ReorderingReport(APIView):
    permission_classes = (permissions.IsAuthenticated,)
    def get(self, request , format = None):
        objs = Product.objects.all()

        toInclude= []
        toIncludeExtended = []
        for o in objs:
            if o.inStock < o.reorderTrashold:
                toInclude.append({"name" : o.name , "SKU": o.serialNo , "Stock" : o.inStock})
                toIncludeExtended.append({ "pk" : o.pk, "name" : o.name , "SKU": o.serialNo , "Stock" : o.inStock,"reorderTrashold" : o.reorderTrashold})

        if 'onlyData' in request.GET:
            return  Response(toIncludeExtended , status=status.HTTP_200_OK)
        else:
            return ExcelResponse(toInclude)



class StockReport(APIView):
    permission_classes = (permissions.IsAuthenticated,)
    def get(self, request , format = None):
        objs = Product.objects.all()
        return ExcelResponse(objs)


# class BulkProductsCreationAPI(APIView):
#     renderer_classes = (JSONRenderer,)
#     permission_classes = (permissions.IsAuthenticated,)
#
#     def post(self, request, format=None):
#         print 'hiiiiiiiiiiiiiiiiii'
#         wb = load_workbook(filename = BytesIO(request.FILES['xl'].read()))
#         ws = wb.worksheets[0]
#         row_count = ws.max_row
#         count = 0
#         print request.user ,type(request.user),request.user.pk
#         for i in range(1, row_count):
#             a = ws['A' + str(i+1)].value
#             b = ws['B' + str(i+1)].value
#             c = ws['C' + str(i+1)].value
#             quantity = b if b else 0
#             price = c if c else 0
#             if re.search('[a-zA-Z]+',a) and '(' in a:
#                 data = {'user':request.user, 'name':a.split('(')[0], 'price':price, 'serialNo':a.split('(')[-1][0:-1], 'inStock':quantity}
#                 print data
#                 count += 1
#                 p,created = Product.objects.get_or_create(**data)
#
#
#         return Response({"count" : count}, status = status.HTTP_200_OK)


#######################

class BulkProductsCreationAPIView(APIView):
    permission_classes = (permissions.IsAuthenticated , isAdmin)
    def post(self, request, format=None):
        wb = load_workbook(filename = BytesIO(request.FILES['xl'].read()))
        ws = wb.worksheets[0]
        row_count = ws.max_row
        column_count = ws.max_column
        count = 0
        for i in range(2, row_count+1):
            _PSKU = ws['A' + str(i)].value
            _SKU = ws['B' + str(i)].value
            _name = ws['C' + str(i)].value
            _mrp = ws['D' + str(i)].value
            _sellPrice = ws['E' + str(i)].value
            _serialId = ws['F' + str(i)].value
            _reorderTh = ws['G' + str(i)].value
            _orderTh = ws['H' + str(i)].value
            _unitType = ws['I' + str(i)].value
            _howMuch = ws['J' + str(i)].value
            _pMeta = ws['k' + str(i)].value
            _image = ws['L' + str(i)].value
            _description = ws['M' + str(i)].value
            _aOnline = ws['N' + str(i)].value
            _category = ws['O' + str(i)].value
            _inStock = ws['P' + str(i)].value
            print _SKU
            if _PSKU =="NONE":
                try:
                    Product.objects.get(serialNo__iexact=_SKU)
                    pass
                except:
                    _image_path ='/POS/displayPictures/'+ _image
                    prodMetaObj = ProductMeta.objects.get(description__iexact = _pMeta)
                    send = Product(name=_name, unit=_unitType,price=_mrp,serialNo=_SKU,description=_description,
                    serialId=_serialId , reorderTrashold =_reorderTh,orderTrashold = _orderTh, discount = _sellPrice, howMuch = _howMuch,user = request.user,displayPicture = _image_path,productMeta=prodMetaObj)
                    send.save()
                    catObj = genericProduct.objects.get(name__iexact = _category)
                    if _aOnline == 'YES':
                        listObj = listing(product=send,parentType=catObj,user=request.user)
                        listObj.save()
                    stockObj = StoreQty(quantity = _inStock,product = send, master=True)
                    stockObj.save()
                    count+=1
            else:
                #integrate with parent sku
                try:
                    ProductVerient.objects.get(sku__iexact = _SKU)
                    pass
                except:
                    _image_path ='/POS/productVarient/'+ _image
                    parentObj = Product.objects.get(serialNo__iexact=_PSKU)
                    prod_var = ProductVerient(price=_mrp,sku= _SKU,serialId=_serialId, reOrderThreshold =_reorderTh,orderThreshold = _orderTh, discount = _sellPrice, unitPerpack = _howMuch,parent = parentObj, prodImage = _image_path,unit=_unitType )
                    prod_var.save()
                    stockObj = StoreQty(quantity = _inStock,product = parentObj, master=True,productVariant = prod_var )
                    stockObj.save()
                    count+=1
            # try:
            #     genericObj = genericProduct.objects.get(name__iexact = _category)
            #     parentType = genericObj
            # except:
            #     print 'category is not available \n'
            # attachmentOne = 'ecommerce/pictureUploads/' +str(_image)
            # imageOneSend = media(user=request.user,attachment = attachmentOne,mediaType='image' )
            # imageOneSend.save()
            # listingSend = listing(parentType=parentType, product=send,user=request.user,productIndex=100)
            # listingSend.save()
            # listingSend.files.add(imageOneSend)
            # listingSend.save()
            # if _aOnline == 'YES':

            #have to add to stock value in inventory
        return Response({'count':count},status = status.HTTP_200_OK)




######################
class purchaseReportHead(Flowable):

    def __init__(self, request , POs):
        Flowable.__init__(self)
        self.req = request
        self.POs = POs
    #----------------------------------------------------------------------
    def draw(self):
        """
        draw the floable
        """
        # print self.invoice.status
        now = datetime.datetime.now(pytz.timezone('Asia/Kolkata'))
        # print self.invoice.status
        # if self.invoice.status in ['quoted']:
        #     docTitle = 'SALES QUOTATION'
        # else:
        docTitle = 'PURCHASE ORDER'

        passKey = '%s%s'%(str(self.req.user.date_joined.year) , self.req.user.pk) # also the user ID
        docID = '%s%s' %( now.year , self.POs.pk)


        pSrc = '''
        <font size=14>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<u>%s</u></font><br/><br/><br/>
        <font size=9>
        <strong>Generated by:</strong> %s<br/>
        <strong>On:</strong> %s<br/>
        <strong>Document ID:</strong> %s<br/><br/>
        </font>
        ''' % ( docTitle , '%s %s (%s)' %(self.req.user.first_name ,self.req.user.last_name , passKey )  , now.strftime("%d-%B-%Y - %H:%M:%S") , docID)

        story = []
        head = Paragraph(pSrc , styleN)
        head.wrapOn(self.canv , 200*mm, 50*mm)
        head.drawOn(self.canv , 0*mm, -10*mm)

        # barcode_value = "1234567890"
        # barcode39 = barcode.createBarcodeDrawing('EAN13', value = barcode_value,barWidth=0.3*mm,barHeight=10*mm)
        #
        # barcode39.drawOn(self.canv,160*mm,0*mm)
        # self.canv.drawImage(os.path.join(BASE_DIR , 'logo.png') , 80*mm , 0*mm , 2*cm, 2*cm)

def addPagesNumber(canvas, doc):
    """
    Add the page number
    """
    # print doc.invoice
    now = datetime.datetime.now(pytz.timezone('Asia/Kolkata'))
    passKey = '%s%s'%(str(doc.request.user.date_joined.year) , doc.request.user.pk) # also the user ID
    docID = '%s%s' %( now.year , doc.POs.pk)

    qrw = QrCodeWidget('http://cioc.co.in/documents?id=%s&passkey=%s&app=crmInvoice' %(docID , passKey))
    b = qrw.getBounds()

    w=b[2]-b[0]
    h=b[3]-b[1]

    d = Drawing(60,60,transform=[60./w,0,0,60./h,0,0])
    d.add(qrw)
    renderPDF.draw(d, canvas ,180*mm,270*mm)

    pass

    # page_num = canvas.getPageNumber()
    # text = "<font size='8'>Page #%s</font>" % page_num
    # p = Paragraph(text , styleN)
    # p.wrapOn(canvas , 50*mm , 10*mm)
    # p.drawOn(canvas , 100*mm , 10*mm)



class PageNumberCanvas(canvas.Canvas):

    #----------------------------------------------------------------------
    def __init__(self, *args, **kwargs):
        """Constructor"""
        canvas.Canvas.__init__(self, *args, **kwargs)
        self.pages = []

    #----------------------------------------------------------------------
    def showPage(self):
        """
        On a page break, add information to the list
        """
        self.pages.append(dict(self.__dict__))
        self._startPage()

    #----------------------------------------------------------------------
    def save(self):
        """
        Add the page number to each page (page x of y)
        """
        page_count = len(self.pages)

        for page in self.pages:
            self.__dict__.update(page)
            # self.draw_page_number(page_count)
            self.drawLetterHeadFooter()
            canvas.Canvas.showPage(self)

        canvas.Canvas.save(self)


    #----------------------------------------------------------------------
    def draw_page_number(self, page_count):
        """
        Add the page number
        """

        text = "<font size='8'>Page #%s of %s</font>" % (self._pageNumber , page_count)
        p = Paragraph(text , styleN)
        p.wrapOn(self , 50*mm , 10*mm)
        p.drawOn(self , 100*mm , 10*mm)

    def drawLetterHeadFooter(self):
        self.setStrokeColor(themeColor)
        self.setFillColor(themeColor)
        self.rect(0,0,1500,70, fill=True)
        # print dir(self)
        compNameStyle = styleN.clone('footerCompanyName')
        compNameStyle.textColor = colors.white;

        p = Paragraph(settingsFields.get(name = 'companyName').value , compNameStyle)
        p.wrapOn(self , 50*mm , 10*mm)
        p.drawOn(self , 85*mm  , 18*mm)

        p1 = Paragraph(settingsFields.get(name = 'companyAddress').value , compNameStyle)
        p1.wrapOn(self , 150*mm , 10*mm)
        p1.drawOn(self , 55*mm  , 10*mm)


        p2 = Paragraph( settingsFields.get(name = 'contactDetails').value, compNameStyle)
        p2.wrapOn(self , 200*mm , 10*mm)
        p2.drawOn(self , 40*mm  , 4*mm)

        from svglib.svglib import svg2rlg
        drawing = svg2rlg(os.path.join(globalSettings.BASE_DIR , 'static_shared','images' , 'company_icon.svg'))
        sx=sy=0.5
        drawing.width,drawing.height = drawing.minWidth()*sx, drawing.height*sy
        drawing.scale(sx,sy)
        #if you want to see the box around the image
        # drawing._showBoundary = True
        renderPDF.draw(drawing, self,10*mm  , self._pagesize[1]-20*mm)

        #width = self._pagesize[0]
        # page = "Page %s of %s" % (, page_count)
        # self.setFont("Helvetica", 9)
        # self.drawRightString(195*mm, 272*mm, page)




def genPurchaseOrder(response , POs, request,typ='PO'):

    print 'enterrrrrrrrrrrrrrrrr',typ
    MARGIN_SIZE = 8 * mm
    PAGE_SIZE = A4

    pdf_doc = SimpleDocTemplate(response, pagesize = PAGE_SIZE,
        leftMargin = MARGIN_SIZE, rightMargin = MARGIN_SIZE,
        topMargin = 4*MARGIN_SIZE, bottomMargin = 3*MARGIN_SIZE)


    pdf_doc.POs = POs
    pdf_doc.request = request

    tableHeaderStyle = styles['Normal'].clone('tableHeaderStyle')
    tableHeaderStyle.textColor = colors.white;
    tableHeaderStyle.fontSize = 7



    pHeadDetails = Paragraph('<strong>Item Details</strong>' , tableHeaderStyle)
    pHeadSKU = Paragraph('<strong>SKU</strong>' , tableHeaderStyle)
    pHeadPrice = Paragraph('<strong>Rate</strong>' , tableHeaderStyle)
    pHeadQty = Paragraph('<strong>Item Qty</strong>' , tableHeaderStyle)
    pHeadTotal = Paragraph('<strong>Total</strong>' , tableHeaderStyle)

    # # bookingTotal , bookingHrs = getBookingAmount(o)
    #
    # pFooterQty = Paragraph('%s' % ('o.quantity') , styles['Normal'])
    # pFooterTax = Paragraph('%s' %('tax') , styles['Normal'])
    # pFooterTotal = Paragraph('%s' % (1090) , styles['Normal'])
    # pFooterGrandTotal = Paragraph('%s' % ('INR 150') , tableHeaderStyle)
    if typ=='GRN':
        pHeadQtyReceived = Paragraph('<strong>Qty Received</strong>' , tableHeaderStyle)
        data = [[pHeadDetails,pHeadSKU,pHeadPrice , pHeadQty ,pHeadQtyReceived ,pHeadTotal]]
    else:
        data = [[pHeadDetails,pHeadSKU,pHeadPrice , pHeadQty ,pHeadTotal]]



    # totalQuant = 0
    # totalTax = 0
    # grandTotal = 0
    tableBodyStyle = styles['Normal'].clone('tableBodyStyle')
    tableBodyStyle.fontSize = 7


    grandTotal = 0
    for i in json.loads(POs.products):
        print '***********',i
        # pDescSrc = i['product']['name']
        # pDescSrc = i['product']['serialNo']
        # pDescSrc = i['rate']
        #
        # pDescSrc += i['qty']
        #
        # print i
        pBodyProd = Paragraph(str(i['product']['name']) , tableBodyStyle)
        pBodySku = Paragraph(str(i['product']['serialNo']) , tableBodyStyle)
        # pBodyTitle = Paragraph( pDescSrc , tableBodyStyle)
        pBodyPrice = Paragraph(str(i['rate']) , tableBodyStyle)
        pBodyQty = Paragraph(str(i['qty']), tableBodyStyle)

        if 'receivedQty' in i and typ=='GRN':
            pBodyQtyReceived = Paragraph(str(i['receivedQty']), tableBodyStyle)
            print '@@@@@22222',i['receivedQty'],i['qty']
            i['total'] = i['receivedQty'] * i['rate']
            print i['total']
            pBodyTotal = Paragraph(str(i['total']) , tableBodyStyle)
            data.append([pBodyProd,pBodySku,pBodyPrice, pBodyQty,pBodyQtyReceived,pBodyTotal])
        else:
            i['total'] = i['rate'] * i['qty']
            pBodyTotal = Paragraph(str(i['total']) , tableBodyStyle)
            data.append([pBodyProd,pBodySku,pBodyPrice, pBodyQty,pBodyTotal])

        grandTotal  += i['total']









    tableGrandStyle = tableHeaderStyle.clone('tableGrandStyle')
    tableGrandStyle.fontSize = 10

    if typ=='GRN':
        data += [['', '','','','',''],['', '', '', Paragraph('sub Total (INR)' , tableHeaderStyle),'', Paragraph(str(grandTotal) , tableGrandStyle)]]
    else:
        data += [['', '','','',''],['', '',  Paragraph('Sub Total (INR)' , tableHeaderStyle),'', Paragraph(str(grandTotal) , tableGrandStyle)]]


    t=Table(data)
    ts = TableStyle([('ALIGN',(1,1),(-3,-3),'RIGHT'),
                ('VALIGN',(0,1),(-1,-3),'TOP'),
                ('VALIGN',(0,-2),(-1,-2),'TOP'),
                ('VALIGN',(0,-1),(-1,-1),'TOP'),
                ('SPAN',(-3,-1),(-2,-1)),
                ('TEXTCOLOR',(0,0),(-1,0) , colors.white),
                ('BACKGROUND',(0,0),(-1,0) , themeColor),
                # ('LINEABOVE',(0,0),(-1,0),0.25,themeColor),
                ('LINEABOVE',(0,1),(-1,1),0.25,themeColor),
                # ('BACKGROUND',(-2,-2),(-1,-2) , colors.HexColor('#eeeeee')),
                ('BACKGROUND',(-3,-1),(-1,-1) , themeColor),
                # ('LINEABOVE',(-2,-2),(-1,-2),0.25,colors.gray),
                ('LINEABOVE',(0,-1),(-1,-1),0.25,colors.gray),
                # ('LINEBELOW',(0,-1),(-1,-1),0.25,colors.gray),
            ])
    t.setStyle(ts)
    t._argW[0] = 8*cm
    t._argW[1] = 3*cm
    t._argW[2] = 3*cm
    t._argW[3] = 3*cm
    if typ=='GRN':
        t._argW[0] = 7*cm
        t._argW[1] = 2.5*cm
        t._argW[2] = 2.5*cm
        t._argW[3] = 2.5*cm
        t._argW[4] = 2.5*cm
    # t._argW[3] = 2*cm
    # t._argW[4] = 2*cm
    # t._argW[5] = 2*cm
    # t._argW[6] = 1.6*cm
    # t._argW[7] = 2*cm


    story = []

    expHead = purchaseReportHead(request , POs)
    story.append(Spacer(3,2*cm))
    story.append(expHead)
    story.append(Spacer(3,0.75*cm))

    adrs = POs.service.address

    if POs.service.tin is None:
        tin = 'NA'
    else:
        tin = POs.service.tin

    if POs.service.cin is None:
        cin = 'NA'
    else:
        cin = POs.service.cin

    summryParaSrc = """
    <font size='11'><strong>Vendor details:</strong></font> <br/><br/>
    <font size='9'>
    %s<br/>
    %s<br/>
    %s<br/>
    %s<br/>
    %s<br/>
    %s<br/>
    <strong>CIN:</strong>%s<br/>
    </font>
    """ %(POs.service.name , POs.service.address.street , POs.service.address.city ,POs.service.address.state , POs.service.address.pincode , POs.service.address.country , POs.service.tin)
    story.append(Paragraph(summryParaSrc , styleN))
    story.append(t)
    story.append(Spacer(2.5,0.5*cm))

    pdf_doc.build(story,onFirstPage=addPagesNumber, onLaterPages=addPagesNumber, canvasmaker=PageNumberCanvas)

class ProductPrint(APIView):
    renderer_classes = (JSONRenderer,)
    def get(self , request , format = None):
        if 'POs' not in request.GET:
            return Response(status=status.HTTP_400_BAD_REQUEST)

        response = HttpResponse(content_type='application/pdf')
        print'aaaaaaaaaaaaaaaaa' ,request.GET['POs']
        o = PurchaseOrder.objects.get(id = request.GET['POs'])
        response['Content-Disposition'] = 'attachment; filename="POsdownload%s%s.pdf"'
        genPurchaseOrder(response,o, request)
        # f = open('./media_root/invoicedownload%s%s.pdf'%(o.pk, o.status) , 'wb')
        # f.write(response.content)
        # f.close()
        # if 'saveOnly' in request.GET:
        #     return Response(status=status.HTTP_200_OK)
        return response

class ProductPrintGrns(APIView):
    renderer_classes = (JSONRenderer,)
    def get(self , request , format = None):
        if 'POs' not in request.GET:
            return Response(status=status.HTTP_400_BAD_REQUEST)

        response = HttpResponse(content_type='application/pdf')
        print'aaaaaaaaaaaaaaaaa' ,request.GET['POs']
        o = PurchaseOrder.objects.get(id = request.GET['POs'])
        response['Content-Disposition'] = 'attachment; filename="POsdownload%s%s.pdf"'
        genPurchaseOrder(response,o, request,typ='GRN')

        # return response


class GetTaxList(APIView):
    renderer_classes = (JSONRenderer,)
    def get(self , request , format = None):
        print request.GET
        value =request.GET
        frm = value['frm']
        to = value['to']
        mode = value['mode']
        typ = value['typ']
        toReturn =[]
        frm = datetime.datetime.strptime(frm,'%Y-%m-%dT%H:%M:%S.%fZ' )
        to =  datetime.datetime.strptime(to,'%Y-%m-%dT%H:%M:%S.%fZ' )
        if mode == 'offline':
            obj =  Invoice.objects.filter(created__range =(datetime.datetime.combine(frm, datetime.time.min),datetime.datetime.combine(to, datetime.time.max)))
            for i in obj:
                toReturn.append({'customername':i.customer.name,'tax':i.totalTax,'dated':i.created })
        else:
            toReturn =[]
        if typ == 'data':
            return Response(toReturn, status = status.HTTP_200_OK)
        else:
             return ExcelResponse(toReturn)


    # class GetTaxListExcel(APIView):
    #     renderer_classes = (JSONRenderer,)
    #     def get(self , request , format = None):
    #         print request.GET
    #         value =request.GET
    #         frm = value['frm']
    #         to = value['to']
    #         mode = value['mode']
    #         toReturn =[]
    #         frm = datetime.datetime.strptime(frm,'%Y-%m-%dT%H:%M:%S.%fZ' )
    #         to =  datetime.datetime.strptime(to,'%Y-%m-%dT%H:%M:%S.%fZ' )
    #         if mode == 'offline':
    #             obj =  Invoice.objects.filter(created__range =(datetime.datetime.combine(frm, datetime.time.min),datetime.datetime.combine(to, datetime.time.max)))
    #             for i in obj:
    #                 toReturn.append({'customername':i.customer.name,'product':i.products,'tax':i.totalTax,'dated':i.created })
    #         else:
    #             toReturn =[]
    #         return ExcelResponse(toReturn)

class AddProductSKU(APIView):
    renderer_classes = (JSONRenderer,)
    def post(self , request , format = None):
        if 'value' in request.data:
            p = Product.objects.get(pk = request.data['value'])
            p.serialNo = "PRO"+str(p.pk)
            p.save()
        else:
            productLIst = Product.objects.all()
            for p in productLIst:
                if p.serialNo=='':
                    p.serialNo="PRO"+str(p.pk)
                    p.save()
        return Response(p.serialNo,status = status.HTTP_200_OK)

class PosInvoicePrinter(APIView):
    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.AllowAny ,)
    def get(self , request , format = None):
        print request.GET,'get dataaaaaaaaaaaaa'
        if 'orderId' in request.GET and 'deviceId' in request.GET:
            try:
                deviceId = request.GET['deviceId']
                orderObj = Invoice.objects.get(pk=int(request.GET['orderId']))
                toSend = model_to_dict(orderObj)
                try:
                    companyName = appSettingsField.objects.get(app__id=25,name='companyName').value
                    companyAddress = appSettingsField.objects.get(app__id=25,name='companyAddress').value
                    soup1 = BeautifulSoup(companyName)
                    companyName = str(soup1.text)
                    soup2 = BeautifulSoup(companyAddress)
                    companyAddress = str(soup2.text)
                except:
                    companyName = ''
                    companyAddress = ''
                try:
                    toSend['companyName'] = companyName
                    toSend['companyAddress'] = companyAddress
                    toSend['storeName'] = ''
                    toSend['storeAddress'] = ''
                    print 'postinggggggggggggggggg'

                    requests.post("http://"+globalSettings.WAMP_SERVER+"/notify",json={'topic': 'service.POS.Printer.{0}'.format(deviceId),'args': [{'data':toSend}]})
                    try:
                        doubleCopyObj = appSettingsField.objects.get(name='doubleInvoiceCopy')
                        if doubleCopyObj.flag:
                            print 'small slipppppppppp'
                            productsData = json.loads(orderObj.products)
                            for i in productsData:
                                print 'product data'

                                requests.post("http://"+globalSettings.WAMP_SERVER+"/notify",json={'topic': 'service.POS.Printer.{0}'.format(deviceId),'args': [{'id':orderObj.pk,'name':i['data']['name'],'qty':i['quantity'],'smallBill':'yes'}]})
                    except:
                        pass
                except:
                    print 'Server Has Not Connected'
            except:
                print 'Invalid Request Data'
        return Response({},status=status.HTTP_200_OK)


class SaveToEcommerceAPIView(APIView):
    renderer_classes = (JSONRenderer,)
    def post(self , request , format = None):
        toReturn =[]
        print request.data['category'],'aaaaaa'
        category = genericProduct.objects.get(pk=request.data['category'])
        product = Product.objects.get(pk=request.data['product'])
        invqty = request.data['stockQty']
        if request.data['mode']=='product':
            if listing.objects.filter(product__id=product.pk).count()>0:
                listObj = listing.objects.get(product=product)
                listObj.parentType=category
                print listObj.parentType.pk,'lllllllllll'
                listObj.save()
            else:
                print 'kkkkkkkkkkkkkkkk'
                listObj = listing.objects.create(product=product,parentType=category,user = request.user)
            invObj =  StoreQty.objects.filter(product=product,master=request.data['master'],productVariant=None)
            if invObj.exists():
                invObjj = invObj.first()
                invObjj.quantity = invqty
                invObjj.save()
            else:
                invObj =  StoreQty.objects.create(product=product,quantity = invqty,master=request.data['master'],productVariant=None)
        elif request.data['mode']=='product_var':
            prodvar = ProductVerient.objects.get(pk=request.data['prod_var'])
            objData =  StoreQty.objects.filter(product=product,master=request.data['master'],productVariant__id=prodvar.id)
            if objData.exists():
                invObj = objData.first()
                invObj.quantity = invqty
                invObj.save()
            else:
                invObj =  StoreQty.objects.create(product=product,quantity = invqty,master=request.data['master'],productVariant=prodvar)
        return Response(toReturn, status = status.HTTP_200_OK)

# def createStoreCredit(request):
#     print 'herrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr'
#     if request.method == 'POST':
#         c={}
#         print request.POST,"kkkk"
#         # print request.body,type(request.body)
#         # c= json.loads(request.body.decode('utf-8'))
#         c=request.POST
#         print c,type(c)
#         print c['phoneNumber']
#         print c['amount']
#
#         StoreObj=StoreCredit.objects.create(phoneNumber=c['phoneNumber'],amount=c['amount'],token=c['token'],used=c['used'])
#         StoreObj.save()
#         return JsonResponse({"status" : "success","phonenumber":c['phoneNumber'],"amount":c['amount'],'token':c['token'],'used':c['used']})
#     elif request.method=='GET':
#         scObjs = StoreCredit.objects.all()
#         toRet = serializers.serialize("json", scObjs)
#         print toRet
#         return JsonResponse({"data" : toRet})
#     return JsonResponse({"status" : "success"})





class BulkInventoryCreationAPIView(APIView):
    permission_classes = (permissions.IsAuthenticated , isAdmin)
    def post(self, request, format=None):
        wb = load_workbook(filename = BytesIO(request.FILES['xl'].read()))
        ws = wb.worksheets[0]
        row_count = ws.max_row
        column_count = ws.max_column
        count = 0
        for i in range(2, row_count+1):
            _PSKU = ws['A' + str(i)].value
            _SKU = ws['B' + str(i)].value
            _quantity = ws['C' + str(i)].value
            print _SKU
            if _PSKU =="NONE":
                productobj = Product.objects.get(serialNo__iexact=_SKU)
                try:
                    strObj = StoreQty.objects.filter(product = productobj,productVariant = None,master = True)
                    objStr = strObj[0]
                    print objStr
                    objStr.quantity += _quantity
                    objStr.save()
                    count +=1
                except:
                    strObj = StoreQty(product = productobj,quantity = _quantity,master = True)
                    strObj.save()
                    count +=1
            else:
                productobj = Product.objects.get(serialNo__iexact=_PSKU)
                prodvar = ProductVerient.objects.get(sku = _SKU)
                try:
                    strObj = StoreQty.objects.filter(product = productobj,productVariant = prodvar,master = True)
                    objStr = strObj[0]
                    objStr.quantity += _quantity
                    objStr.save()
                    count +=1
                except:
                    strObj = StoreQty(product = productobj,quantity = _quantity,productVariant = prodvar,master = True)
                    strObj.save()
                    count +=1
        return Response({'count':count},status = status.HTTP_200_OK)


class BulkInventoryDeductionAPIView(APIView):
    permission_classes = (permissions.IsAuthenticated , isAdmin)
    def post(self, request, format=None):
        wb = load_workbook(filename = BytesIO(request.FILES['xl'].read()))
        ws = wb.worksheets[0]
        row_count = ws.max_row
        column_count = ws.max_column
        count = 0
        for i in range(2, row_count+1):
            _PSKU = ws['A' + str(i)].value
            _SKU = ws['B' + str(i)].value
            _quantity = ws['C' + str(i)].value
            print _SKU
            if _PSKU =="NONE":
                productobj = Product.objects.get(serialNo__iexact=_SKU)
                try:
                    strObj = StoreQty.objects.filter(product = productobj,productVariant = None,master = True)
                    objStr = strObj[0]
                    print objStr
                    objStr.quantity = objStr.quantity - _quantity
                    objStr.save()
                    count +=1
                except:
                    pass
            else:
                productobj = Product.objects.get(serialNo__iexact=_PSKU)
                prodvar = ProductVerient.objects.get(sku = _SKU)
                try:
                    strObj = StoreQty.objects.filter(product = productobj,productVariant = prodvar,master = True)
                    objStr = strObj[0]
                    objStr.quantity =objStr.quantity - _quantity
                    objStr.save()
                    count +=1
                except:
                    pass
        return Response({'count':count},status = status.HTTP_200_OK)


class BulkProductMetaAPIView(APIView):
    permission_classes = (permissions.IsAuthenticated , isAdmin)
    def post(self, request, format=None):
        wb = load_workbook(filename = BytesIO(request.FILES['xl'].read()))
        ws = wb.worksheets[0]
        row_count = ws.max_row
        column_count = ws.max_column
        count = 0
        for i in range(2, row_count+1):
            code = ws['A' + str(i)].value
            typ = ws['B' + str(i)].value
            taxRate = ws['C' + str(i)].value
            description = ws['D' + str(i)].value
            try:
                ProductMeta.objects.get(code = code)
                pass
            except:
                prodMetaObj = ProductMeta(code= code, typ = typ , taxRate = taxRate , description = description)
                prodMetaObj.save()
                count+=1
        return Response({'count':count},status = status.HTTP_200_OK)


class ProductInventoryTotalAPIView(APIView):
    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.AllowAny ,)
    def get(self , request , format = None):
        storeQtyObj = StoreQty.objects.filter(master=True)
        productsList = list(storeQtyObj.values('product').distinct().values('product__pk','product__name','product__displayPicture','product__unit','product__serialId','product__price','product__discount','product__displayPicture'))
        total= 0
        for i in productsList:
            print i['product__price'],'pppppppppppppppppppppppppppppppp'
            total += i['product__price']
            # data = list(storeQtyObj.filter(product=i['product__pk']).values('pk','product','product__price','product__howMuch','productVariant','productVariant__sku','productVariant__unitPerpack','productVariant__unit','product__serialNo','product__unit','quantity','productVariant__price' ,'productVariant__serialId' ))
            # toReturn.append({'productPk':i['product__pk'],'productName':i['product__name'],'productUnit':i['product__unit'],'productSerialId':i['product__serialId'],'productPrice':i['product__price'],'productDiscount':i['product__discount'],'data':data})

        print total,'pkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk'
        return Response(total,status=status.HTTP_200_OK)


from datetime import datetime
date_obj = datetime.now()
date = date_obj.strftime('%d/%m/%Y')
time_sec = date_obj.strftime('%H:%M:%S')

class PrintAPIView(APIView):
    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.AllowAny ,)
    def get(self , request , format = None):
        if 'orderId' in request.GET:

            try:
                companyName = appSettingsField.objects.get(app__id=25,name='companyName').value
                companyAddress = appSettingsField.objects.get(app__id=25,name='companyAddress').value
                soup1 = BeautifulSoup(companyName)
                companyName = str(soup1.text)
                soup2 = BeautifulSoup(companyAddress)
                companyAddress = str(soup2.text)

            except:
                companyName = ''
                companyAddress = ''


            orderObj = Invoice.objects.get(pk=int(request.GET['orderId']))
            toSend = model_to_dict(orderObj)
            if 'storepk' in request.GET:
                storeObj = Store.objects.get(pk=int(request.GET['storepk']))
                storeName = ''
                storeAddress = ''
                if storeObj.name:
                    storeName = storeObj.name
                if storeObj.address:
                    storeAddress = storeObj.address
                    if storeObj.pincode:
                        storeAddress += ' ' + str(storeObj.pincode)

            else:
                storeName = ''
                storeAddress = ''

            date_obj = datetime.now()
            c_date = date_obj.strftime('%d/%m/%Y')
            c_time = date_obj.strftime('%H:%M:%S')
            toSend['date'] = c_date
            toSend['time'] = c_time
            toSend['companyName'] = companyName
            toSend['companyAddress'] = companyAddress
            toSend['storeName'] = storeName
            toSend['storeAddress'] = storeAddress


            if "couponDiscount" in request.GET:
                toSend['couponDiscount']=str(request.GET['couponDiscount'])
            else:
                toSend['couponDiscount']=0


            if "promocode" in request.GET:
                toSend['tokenId']=str(request.GET['promocode'])
            else:
                toSend['tokenId']=0


            if "phonenumber" in request.GET:
                toSend['phonenumber']=str(request.GET['phonenumber'])
            else:
                toSend['phonenumber']=0000000000
            requests.post("http://"+globalSettings.WAMP_SERVER+"/notify",json={'topic': 'service.POS.Printer.{0}'.format(request.GET['connectedDevice']),'args': [{'data':toSend}]})


        return Response({},status=status.HTTP_200_OK)



# version2##############################################################################

class MediaV2ViewSet(viewsets.ModelViewSet):
    permission_classes = (permissions.AllowAny, )
    serializer_class = MediaV2Serializer
    filter_backends = [DjangoFilterBackend]
    filter_fields = ['mediaType']
    def get_queryset(self):
        return MediaV2.objects.all()


class CategoryV2ViewSet(viewsets.ModelViewSet):
    permission_classes = (permissions.AllowAny, )
    serializer_class = CategoryV2Serializer
    # filter_backends = [DjangoFilterBackend]
    # filter_fields = ['name','parent','restricted','store','alias']
    def get_queryset(self):
        return GenericProductV2.objects.filter(parent_id__isnull = True)

class ProductV2ViewSet(viewsets.ModelViewSet):
    permission_classes = (permissions.AllowAny, )
    serializer_class = ProductV2Serializer
    filter_backends = [DjangoFilterBackend]
    filter_fields = ['name','category','store']
    def get_queryset(self):
        return ProductV2.objects.all()

class DiscountMatrixV2ViewSet(viewsets.ModelViewSet):
    permission_classes = (permissions.AllowAny, )
    serializer_class = DiscountMatrixV2Serializer
    filter_backends = [DjangoFilterBackend]
    filter_fields = ['product']
    def get_queryset(self):
        return DiscountMatrixV2.objects.all()

class ProductVariantV2ViewSet(viewsets.ModelViewSet):
    permission_classes = (permissions.AllowAny, )
    serializer_class = ProductVariantV2Serializer
    filter_backends = [DjangoFilterBackend]
    filter_fields = ['sku' , 'barcodeId' , 'parent' , 'customizable']
    def get_queryset(self):
        # for i in ProductVariantV2.objects.all():
        #     print i
        return ProductVariantV2.objects.all()

class ProductVariantGetV2ViewSet(viewsets.ModelViewSet):
    permission_classes = (permissions.AllowAny, )
    serializer_class = ProductVariantV2GetSerializer
    filter_backends = [DjangoFilterBackend]
    filter_fields = ['sku' , 'barcodeId' , 'parent' , 'customizable']
    def get_queryset(self):
        return ProductVariantV2.objects.all()

class ProductV2LiteViewSet(viewsets.ModelViewSet):
    permission_classes = (permissions.AllowAny, )
    serializer_class = ProductV2LiteSerializer
    filter_backends = [DjangoFilterBackend]
    filter_fields = ['name','category']
    def get_queryset(self):

        return ProductV2.objects.all()

class TargetViewSet(viewsets.ModelViewSet):
    permission_classes = (permissions.AllowAny, )
    serializer_class = TargetSerializer
    filter_backends = [DjangoFilterBackend]
    filter_fields = [ ]
    def get_queryset(self):
        return Target.objects.all()

class WalletViewSet(viewsets.ModelViewSet):
    permission_classes = (permissions.AllowAny, )
    serializer_class = WalletSerializer
    filter_backends = [DjangoFilterBackend]
    filter_fields = [ ]
    def get_queryset(self):
        return Wallet.objects.all()

class GiftViewSet(viewsets.ModelViewSet):
    permission_classes = (permissions.AllowAny, )
    serializer_class = GiftSerializer
    filter_backends = [DjangoFilterBackend]
    filter_fields = [ ]
    def get_queryset(self):
        return Gift.objects.all()

class WalletTransitionViewSet(viewsets.ModelViewSet):
    permission_classes = (permissions.AllowAny, )
    serializer_class = WalletTransitionSerializer
    filter_backends = [DjangoFilterBackend]
    filter_fields = [ ]
    def get_queryset(self):
        return WalletTransition.objects.all()

from django.http import JsonResponse
from django.forms.models import model_to_dict
from django.core import serializers
from django.db.models.functions import Concat
class CategorySortListAPI(APIView):
    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.AllowAny ,)
    def get(self , request , format = None):
        gpList = list(GenericProductV2.objects.filter(parent__isnull=True).values('name','pk','restricted','alias').annotate(img=Concat(Value('/media/'),'visual')))
        # print gpList,'GPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP#####################33'
        user = request.user
        for idx, val in enumerate(gpList):
            if val['restricted']==True:
                if user.is_staff==True:
                    chilData = list(GenericProductV2.objects.filter(parent=val['pk']).values('name','pk','alias').annotate(img=Concat(Value('/media/'),'visual')))
                    if len(chilData)>0:
                        val['child'] = chilData
                    else:
                        val['child'] = []
                else:
                    del gpList[idx]
            else:
                chilData = list(GenericProductV2.objects.filter(parent=val['pk']).values('name','pk','alias').annotate(img=Concat(Value('/media/'),'visual')))
                if len(chilData)>0:
                    val['child'] = chilData
                else:
                    val['child'] = []

        return Response(gpList, status = status.HTTP_200_OK)

class ProductApiViewV2(APIView):
    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.AllowAny ,)
    def post(self, request, format=None):
        obj = request.data
        user = request.user
        storeObj = Store.objects.filter(owner=user)[0]
        categoryObj = GenericProductV2.objects.get(pk=int(obj['category']))

        if 'pk' in obj:
            prodObj = ProductV2.objects.get(pk = obj['pk'])
            prodObj.name = obj['name']
            prodObj.category = categoryObj

        else:
            prodObj = ProductV2.objects.create(name = obj['name'],description = obj['description'],category = categoryObj,store = storeObj,creator = user)
        prodObj.save()
        if 'productIndex' in obj:
            prodObj.productIndex = obj['productIndex']
            prodObj.detailedDescription = obj['detailedDescription']

        prodObj.save()
        if len(obj['sku'])>0:
            if 'productVariant_pk' in obj:
                prodvarObj = ProductVariantV2.objects.get(pk = obj['productVariant_pk'])
                prodvarObj.sku = obj['sku']
                prodvarObj.unitType = obj['unitType']
                prodvarObj.value = obj['value']
                prodvarObj.price = obj['price']
                prodvarObj.sellingPrice = obj['sellingPrice']
                prodvarObj.maxQtyOrder = obj['maxQtyOrder']
                prodvarObj.minQtyOrder = obj['minQtyOrder']
                prodvarObj.reOrderThreshold = obj['reOrderThreshold']
                prodvarObj.shippingCost = obj['shippingCost']
                prodvarObj.stock = obj['stock']
                prodvarObj.barcodeId = obj['barcodeId']
                prodvarObj.brand = obj['brand']
                prodvarObj.displayName = prodObj.name + prodvarObj.value + prodvarObj.unitType
                prodvarObj.discount = prodvarObj.price - prodvarObj.sellingPrice

            else:
                prodvarObj = ProductVariantV2.objects.create(sku = obj['sku'],unitType = obj['unitType'],value = obj['value'],price = obj['price'],sellingPrice = obj['sellingPrice'],maxQtyOrder = obj['maxQtyOrder'],minQtyOrder = obj['minQtyOrder'],reOrderThreshold = obj['reOrderThreshold'],shippingCost = obj['shippingCost'],stock = obj['stock'],parent = prodObj)
                prodvarObj.displayName = prodObj.name + prodvarObj.value + prodvarObj.unitType
                prodvarObj.discount = prodvarObj.price - prodvarObj.sellingPrice

            prodvarObj.save()
            if 'specialOffer' in obj:
                prodvarObj.specialOffer = obj['specialOffer']
            if 'barcodeId' in obj:
                prodvarObj.barcodeId = obj['barcodeId']
            prodvarObj.save()
            if 'images' in obj:
                prodvarObj.images.clear()
                for j in obj['images']:
                    prodvarObj.images.add(MediaV2.objects.get(pk = j))
            prodvarObj.save()

        varObj = ProductVariantV2.objects.filter(parent = prodObj)
        for i in varObj:
            if 'deliveryTime' in obj:
                i.deliveryTime = obj['deliveryTime']
            if 'customizable' in obj:
                i.customizable = obj['customizable']
            if 'customisedDeliveryTime' in obj:
                i.customisedDeliveryTime = obj['customisedDeliveryTime']
            if 'brand' in obj:
                i.brand = obj['brand']
            if 'productMeta' in obj:
                metaObj = ProductMeta.objects.get(pk = obj['productMeta'])
                i.productMeta = metaObj
            i.save()

        return Response({'product': prodObj.pk },status=status.HTTP_200_OK)

class fetchAllProducts(APIView):
    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.AllowAny , )
    def get(self, request, format=None):
        groupObj = GroupV2.objects.filter(store__pk = 1)
# top and middle banner data--------------------------------------------------------------------
        try:
            offerbanners1 = list(offerBannerV2.objects.filter(store__pk = 1,level = 1).values())
        except:
            offerbanners1 = ""
        try:
            offerbanners2 = list(offerBannerV2.objects.filter(store__pk = 1,level = 2).values())
        except:
            offerbanners2 = ""
# level1 carousel data--------------------------------------------------------------------------
        try:
            dealweek = groupObj.get(name = "Deals of the Week" )
        except:
            dealweek = ""
        try:
            dealfeatured = groupObj.get(name = "Featured")
        except:
            dealfeatured = ""
        try:
            dealonsale = groupObj.get(name = "On Sale")
        except:
            dealonsale = ""
        try:
            dealbestrated = groupObj.get(name = "Best Rated")
        except:
            dealbestrated = ""
# popular category carousel data-----------------------------------------------------------------
        try:
            popularcat = groupObj.get(name = "Popular Categories")
        except:
            popularcat = ""
# level2 carousel data-------------------------------------------------------------------------
        try:
            hotfeatured = groupObj.get(name = "Hot Featured")
        except:
            hotfeatured = ""
        try:
            hotonsale = groupObj.get(name = "Hot On Sale")
        except:
            hotonsale = ""
        try:
            hotbestrated = groupObj.get(name = "Hot Best Rated")
        except:
            hotbestrated = ""
# level3 carousel data-----------------------------------------------------------------------------
        try:
            hotbesttop20 = groupObj.get(name = "Hot Best Top 20")
        except:
            hotbesttop20 = ""
        try:
            hotbestaudio = groupObj.get(name = "Hot Best Audio & Video")
        except:
            hotbestaudio = ""
        try:
            hotbestlaptop = groupObj.get(name = "Hot Best Laptop")
        except:
            hotbestlaptop = ""
# trends carousel data-------------------------------------------------------------------------------
        try:
            trends = groupObj.get(name = "Trends")
        except:
            trends = ""
# append data----------------------------------------------------------------------------------------
        if dealweek:
            dealsObj = {'name':dealweek.name,'products' : []}
        else:
            dealsObj = None
        if popularcat:
            popularObj = {'name':popularcat.name,'products' : []}
        else:
            popularObj = None
        if trends:
            trendsObj = {'name':trends.name,'products' : []}
        else:
            trendsObj = None
        if dealfeatured:
            featuredObj = {'name':dealfeatured.name,'products' : []}
        else:
            featuredObj = None
        if dealonsale:
            onsaleObj = {'name':dealonsale.name,'products' : []}
        else:
            onsaleObj = None
        if dealbestrated:
            bestratedObj = {'name':dealbestrated.name,'products' : []}
        else:
            bestratedObj = None
        if hotfeatured:
            hotfeaturedObj = {'name':hotfeatured.name,'products' : []}
        else:
            hotfeaturedObj = None
        if hotonsale:
            hotonsaleObj = {'name':hotonsale.name,'products' : []}
        else:
            hotonsaleObj = None
        if hotbestrated:
            hotbestratedObj = {'name':hotbestrated.name,'products' : []}
        else:
            hotbestratedObj = None
        if hotbesttop20:
            hotbest3top20 = {'name':hotbesttop20.name,'products' : []}
        else:
            hotbest3top20 = None
        if hotbestaudio:
            hotbest3audio = {'name':hotbestaudio.name,'products' : []}
        else:
            hotbest3audio = None
        if hotbestlaptop:
            hotbest3laptop = {'name':hotbestlaptop.name,'products' : []}
        else:
            hotbest3laptop = None
# end append data----------------------------------------------------------------------------------------

# level1carousel---------------------------------------------------------------------------------------
        if dealweek:
            for i in dealweek.products.all():
                varData = ProductVariantV2.objects.filter(parent = i)[0]
                dataObj = ProductVariantV2.objects.filter(parent = i)
                image = ''
                for k in dataObj:
                    images= k.images.all()
                    for j in images:
                        if j.mediaType == 'image':
                            image = str(j.attachment)
                            print image,'ppppppppppppp'
                            break
                dealsObj['products'].append({'pk':i.pk,'name':i.name,'category':i.category.name,'categorypk':i.category.pk,'price':varData.price,'sellingPrice':varData.sellingPrice,'image':image})

        if dealfeatured:
            for i in dealfeatured.products.all():
                varData = ProductVariantV2.objects.filter(parent = i)[0]
                dataObj = ProductVariantV2.objects.filter(parent = i)
                image = ''
                for k in dataObj:
                    images= k.images.all()
                    for j in images:
                        if j.mediaType == 'image':
                            image = str(j.attachment)
                            print image,'ppppppppppppp'
                            break
                featuredObj['products'].append({'pk':i.pk,'name':i.name,'category':i.category.name,'categorypk':i.category.pk,'price':varData.price,'sellingPrice':varData.sellingPrice,'image':image})

        if dealonsale:
            for i in dealonsale.products.all():
                varData = ProductVariantV2.objects.filter(parent = i)[0]
                dataObj = ProductVariantV2.objects.filter(parent = i)
                image = ''
                for k in dataObj:
                    images= k.images.all()
                    for j in images:
                        if j.mediaType == 'image':
                            image = str(j.attachment)
                            print image,'ppppppppppppp'
                            break
                onsaleObj['products'].append({'pk':i.pk,'name':i.name,'category':i.category.name,'categorypk':i.category.pk,'price':varData.price,'sellingPrice':varData.sellingPrice,'image':image})
        if dealbestrated:
            for i in dealbestrated.products.all():
                varData = ProductVariantV2.objects.filter(parent = i)[0]
                dataObj = ProductVariantV2.objects.filter(parent = i)
                image = ''
                for k in dataObj:
                    images= k.images.all()
                    for j in images:
                        if j.mediaType == 'image':
                            image = str(j.attachment)
                            print image,'ppppppppppppp'
                            break
                bestratedObj['products'].append({'pk':i.pk,'name':i.name,'category':i.category.name,'categorypk':i.category.pk,'price':varData.price,'sellingPrice':varData.sellingPrice,'image':image})

# popular category carousel------------------------------------------------------------------------------------------------------------------
        if popularcat:
            for i in popularcat.products.all():
                varData = ProductVariantV2.objects.filter(parent = i)[0]
                dataObj = ProductVariantV2.objects.filter(parent = i)
                image = ''
                for k in dataObj:
                    images= k.images.all()
                    for j in images:
                        if j.mediaType == 'image':
                            image = str(j.attachment)
                            print image,'ppppppppppppp'
                            break
                popularObj['products'].append({'pk':i.pk,'name':i.name,'category':i.category.name,'categorypk':i.category.pk,'price':varData.price,'sellingPrice':varData.sellingPrice,'image':image,'maxQtyOrder':varData.maxQtyOrder,'minQtyOrder':varData.minQtyOrder,'stock':varData.stock,'displayName':varData.displayName})





# trends carousel----------------------------------------------------------------------------------------------------------------------------
        if trends:
            for i in trends.products.all():
                varData = ProductVariantV2.objects.filter(parent = i)[0]
                dataObj = ProductVariantV2.objects.filter(parent = i)
                image = ''
                for k in dataObj:
                    images= k.images.all()
                    for j in images:
                        if j.mediaType == 'image':
                            image = str(j.attachment)
                            print image,'ppppppppppppp'
                            break
                trendsObj['products'].append({'pk':i.pk,'name':i.name,'category':i.category.name,'categorypk':i.category.pk,'price':varData.price,'sellingPrice':varData.sellingPrice,'image':image})

# level2 carousel-------------------------------------------------------------------------------------------------------------------------------
        if hotfeatured:
            for i in hotfeatured.products.all():
                varData = ProductVariantV2.objects.filter(parent = i)[0]
                dataObj = ProductVariantV2.objects.filter(parent = i)
                image = ''
                for k in dataObj:
                    images= k.images.all()
                    for j in images:
                        if j.mediaType == 'image':
                            image = str(j.attachment)
                            print image,'ppppppppppppp'
                            break
                hotfeaturedObj['products'].append({'pk':i.pk,'name':i.name,'category':i.category.name,'categorypk':i.category.pk,'price':varData.price,'sellingPrice':varData.sellingPrice,'image':image})

        if hotonsale:
            for i in hotonsale.products.all():
                varData = ProductVariantV2.objects.filter(parent = i)[0]
                dataObj = ProductVariantV2.objects.filter(parent = i)
                image = ''
                for k in dataObj:
                    images= k.images.all()
                    for j in images:
                        if j.mediaType == 'image':
                            image = str(j.attachment)
                            print image,'ppppppppppppp'
                            break
                hotonsaleObj['products'].append({'pk':i.pk,'name':i.name,'category':i.category.name,'categorypk':i.category.pk,'price':varData.price,'sellingPrice':varData.sellingPrice,'image':image})
        if hotbestrated:
            for i in hotbestrated.products.all():
                varData = ProductVariantV2.objects.filter(parent = i)[0]
                dataObj = ProductVariantV2.objects.filter(parent = i)
                image = ''
                for k in dataObj:
                    images= k.images.all()
                    for j in images:
                        if j.mediaType == 'image':
                            image = str(j.attachment)
                            print image,'ppppppppppppp'
                            break
                hotbestratedObj['products'].append({'pk':i.pk,'name':i.name,'category':i.category.name,'categorypk':i.category.pk,'price':varData.price,'sellingPrice':varData.sellingPrice,'image':image})




# level3carousel-----------------------------------------------------------------------------------------------------------------------------

        if hotbesttop20:
            for i in hotbesttop20.products.all():
                varData = ProductVariantV2.objects.filter(parent = i)[0]
                dataObj = ProductVariantV2.objects.filter(parent = i)
                image = ''
                for k in dataObj:
                    images= k.images.all()
                    for j in images:
                        if j.mediaType == 'image':
                            image = str(j.attachment)
                            print image,'ppppppppppppp'
                            break
                hotbest3top20['products'].append({'pk':i.pk,'name':i.name,'category':i.category.name,'categorypk':i.category.pk,'price':varData.price,'sellingPrice':varData.sellingPrice,'image':image})

        if hotbestaudio:
            for i in hotbestaudio.products.all():
                varData = ProductVariantV2.objects.filter(parent = i)[0]
                dataObj = ProductVariantV2.objects.filter(parent = i)
                image = ''
                for k in dataObj:
                    images= k.images.all()
                    for j in images:
                        if j.mediaType == 'image':
                            image = str(j.attachment)
                            print image,'ppppppppppppp'
                            break
                hotbest3audio['products'].append({'pk':i.pk,'name':i.name,'category':i.category.name,'categorypk':i.category.pk,'price':varData.price,'sellingPrice':varData.sellingPrice,'image':image})

        if hotbestlaptop:
            for i in hotbestlaptop.products.all():
                varData = ProductVariantV2.objects.filter(parent = i)[0]
                dataObj = ProductVariantV2.objects.filter(parent = i)
                image = ''
                for k in dataObj:
                    images= k.images.all()
                    for j in images:
                        if j.mediaType == 'image':
                            image = str(j.attachment)
                            print image,'ppppppppppppp'
                            break
                hotbest3laptop['products'].append({'pk':i.pk,'name':i.name,'category':i.category.name,'categorypk':i.category.pk,'price':varData.price,'sellingPrice':varData.sellingPrice,'image':image})


        data = {
        'dealsoftheweek' : dealsObj,
        'dealsfeatured' : featuredObj,
        'dealsonsale' : onsaleObj,
        'dealsbestrated' : bestratedObj,
        'popularcat' : popularObj,
        'trends' : trendsObj,
        'offerbanners1' : offerbanners1,
        'offerbanners2' : offerbanners2,
        'hotfeatured' : hotfeaturedObj,
        'hotonsale' : hotonsaleObj,
        'hotbestrated' : hotbestratedObj,
        'leve3listno1' : hotbest3top20,
        'leve3listno2' : hotbest3audio,
        'leve3listno3' : hotbest3laptop,
        }
        return Response(data, status = status.HTTP_200_OK)

class PagesV2ViewSet(viewsets.ModelViewSet):
    permission_classes = (permissions.AllowAny , )
    queryset = PagesV2.objects.all()
    serializer_class = PagesV2Serializer
    filter_backends = [DjangoFilterBackend]
    filter_fields = ['title','store']
    # def get_queryset(arg):
    #     return  PagesV2.objects.all()

class offerBannerV2ViewSet(viewsets.ModelViewSet):
    permission_classes = (permissions.AllowAny , )
    queryset = offerBannerV2.objects.all()
    serializer_class = offerBannerV2Serializer
    filter_backends = [DjangoFilterBackend]
    filter_fields = ['store']

class PromocodeV2ViewSet(viewsets.ModelViewSet):
    permission_classes = (permissions.AllowAny , )
    # queryset = PromocodeV2.objects.all()
    serializer_class = PromocodeV2Serializer
    filter_backends = [DjangoFilterBackend]
    filter_fields = ['name','store']
    def get_queryset(self):
        if 'coupon_name' in  self.request.GET:
            name =  self.request.GET['coupon_name']
            store =  self.request.GET['store']
            user = self.request.user
            from datetime import date
            today = date.today()
            promoObj = PromocodeV2.objects.filter(name__exact =name, store__pk = store)
            if promoObj:
                orderCount = Order.objects.filter(orderBy = user , coupon = promoObj[0].pk).count()
                if orderCount<promoObj[0].validTimes and promoObj[0].endDate.date()>today:
                    return promoObj
                else:
                    return PromocodeV2.objects.none()
            else:
                return PromocodeV2.objects.none()
        else:
            return PromocodeV2.objects.all()


class FaqCategoryV2ViewSet(viewsets.ModelViewSet):
    permission_classes = (permissions.AllowAny , )
    queryset = FaqCategoryV2.objects.all()
    serializer_class = FaqCategoryV2Serializer
    filter_backends = [DjangoFilterBackend]
    filter_fields = ['name','store']

class FrequentlyQuestionsV2ViewSet(viewsets.ModelViewSet):
    permission_classes = (permissions.AllowAny , )
    queryset = FrequentlyQuestionsV2.objects.all()
    serializer_class = FrequentlyQuestionsV2Serializer
    filter_backends = [DjangoFilterBackend]
    filter_fields = ['ques','parent','store']


class GroupV2ViewSet(viewsets.ModelViewSet):
    permission_classes = (permissions.AllowAny , )
    queryset = GroupV2.objects.all()
    serializer_class = GroupV2Serializer
    filter_backends = [DjangoFilterBackend]
    filter_fields = ['name','store']

class VendorServicesViewSet(viewsets.ModelViewSet):
    permission_classes = (permissions.AllowAny, )
    # permission_classes = (permissions.IsAuthenticated, )
    serializer_class = VendorServicesSerializer
    queryset = VendorServices.objects.all()
    filter_backends = [DjangoFilterBackend]
    filter_fields = ['vendor']

class VendorProfileViewSet(viewsets.ModelViewSet):
    permission_classes = (permissions.AllowAny, )
    # permission_classes = (permissions.IsAuthenticated, )
    serializer_class = VendorProfileSerializer
    queryset = VendorProfile.objects.all()
    filter_backends = [DjangoFilterBackend]
    filter_fields = ['service']

class VendorServicesLiteViewSet(viewsets.ModelViewSet):
    permission_classes = (permissions.AllowAny, )
    # permission_classes = (permissions.IsAuthenticated, )
    serializer_class = VendorServicesLiteSerializer
    queryset = VendorServices.objects.all()
    filter_backends = [DjangoFilterBackend]
    filter_fields = ['product']

from itertools import groupby
from operator import itemgetter

class FiltersByCatViewSet(APIView):
    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.AllowAny , )
    def get(self, request, format=None):
        if 'cat' in request.GET:
            items = Filter.objects.filter(parent = request.GET['cat']).order_by('name').values( 'id', 'value', 'name')
            rows = groupby(items, itemgetter('name'))

            return Response( {c_name: list(items) for c_name, items in rows} , status = status.HTTP_200_OK)
        else:
            toRet = {}
            for f in ProductVariantV2.objects.get(pk = request.GET['varient']).filters.all():
                toRet[f.name] = str(f.pk)

            return Response( toRet , status = status.HTTP_200_OK )

            # {"RAM":"3","Display":"9"}



    def post(self, request, format=None):
        varient = ProductVariantV2.objects.get(pk = request.data['varient'])
        # print  varient.filters.all().count()
        varient.filters.clear()
        # print  varient.filters.all().count()

        for f in request.data['selection'].values():
            f = Filter.objects.get(pk = f).products.add(varient)

        return Response( {"status" : varient.filters.all().count()  } , status = status.HTTP_200_OK)

class CartViewSet(viewsets.ModelViewSet):
    permission_classes = (permissions.AllowAny, )
    serializer_class = CartSerializer
    queryset = Cart.objects.all()
    filter_backends = [DjangoFilterBackend]
    filter_fields = ['product','productVariant','store']

class AddressViewSet(viewsets.ModelViewSet):
    permission_classes = (permissions.AllowAny, )
    serializer_class = AddressSerializer
    queryset = Address.objects.all()
    filter_backends = [DjangoFilterBackend]
    filter_fields = ['store','user']

from django.core.paginator import Paginator


class ProductsViewLite(APIView):
    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.AllowAny , )
    def get(self, request, format=None):
        params = request.GET
        filtrs = json.loads(params['filters']).values()
        print filtrs

        varients = ProductVariantV2.objects.filter( parent__category = params['cat']).order_by('pk')

        for fil in filtrs:
            varients = varients.filter( filters = fil )


        if params['minPrice']>0:
            varients = varients.filter(sellingPrice__gte = params['minPrice'])
        if params['sort'] == 'low2high':
            varients = varients.order_by('sellingPrice')
        elif params['sort'] == 'high2low':
            varients = varients.order_by('-sellingPrice')

        elif params['sort'] == 'new':
            varients = varients.order_by('-created')

        pages = Paginator(varients, 30)
        # print varients
        # q1 = ProductV2.objects.filter(varients__in = varients ).distinct()

        page = pages.page(int(params['page'])+1)



        prods = ProductVarientLiteSerializer( page , many = True ).data

        added = []
        toRet = []
        for p in prods:
            if p['parent'] not in added:
                toRet.append(p)
                added.append(p['parent'])



        return Response( toRet , status = status.HTTP_200_OK )

class ProductDetailsView(APIView):
    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.AllowAny , )
    def get(self, request, id, format=None):
        print id
        prod = ProductDetailsSerializer(ProductV2.objects.get(pk = id) , many = False).data
        return Response( prod , status = status.HTTP_200_OK )


class OrderViewSet(viewsets.ModelViewSet):
    permission_classes = (permissions.AllowAny, )
    serializer_class = OrderSerializer
    queryset = Order.objects.all()
    filter_backends = [DjangoFilterBackend]
    filter_fields = ['store','orderBy','status']

class OrderQtyViewSet(viewsets.ModelViewSet):
    permission_classes = (permissions.AllowAny, )
    serializer_class = OrderQtySerializer
    queryset = OrderQtyMap.objects.all()
    filter_backends = [DjangoFilterBackend]
    filter_fields = ['store','orderBy']




from dateutil.relativedelta import relativedelta
from django.db.models import Count

class DashboardView(APIView):
    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.AllowAny , )
    def get(self, request,  format=None):

        days = self.request.GET['days']

        if days == '7days':
            dt = datetime.now() - timedelta(days = 7)
            print dt, "7777777777777777"

        if days == '15days':
            dt = datetime.now() - timedelta(days = 15)
            print dt, "151515151515151515"

        if days == '1month':
            dt = datetime.now() - relativedelta(months=1)
            print dt, "111111111111monthhhhhhhhhhhh"


        if days =='3months':
            dt = datetime.now() - relativedelta(months=3)
            print dt, "33333333333333monthhhhhhhhhhhhhhhhh"





        store = self.request.GET['store']

        orderobj = Order.objects.filter(store = store).aggregate(Sum('totalAmount'))
        created_order_date = Order.objects.filter( created__gt = dt)
        orderper = Order.objects.filter(store = store).filter('COD')
        print created_order_date ,"fffffffffff"
        print orderper ,"sssssssssss"



        print orderobj['totalAmount__sum'],

        # order=Order.objects.all()
        # for amount in order:
        #     total = 0
        #     total += order.totalAmount
        #     print total,"ssssssssssss"


        dashboarddata = [

        {'name':"orders","price":690, "model":"new", "rs":orderobj['totalAmount__sum']},
        {'name':"Customer","price":690 ,"model":"new", "rs":orderobj['totalAmount__sum']},
        {'name':"Sales","price":690 ,"model":"new", "rs":orderobj['totalAmount__sum']},
        {'name':"COD","price":690 , "model":"new", "rs":orderobj['totalAmount__sum']},
        ]
        # return JsonResponse({'dashboarddata':dashboarddata}, status = status.HTTP_200_OK)
        chartlebels = [

        ["January", "February", "March", "April", "May", "June", "July"],
        ]

        chartdata = [

        [65, 69, 80, 81, 56, 55, 40],
        [55, 49, 45, 90, 86, 65, 10],
        [45, 59, 50, 23, 63, 25, 0]
        ]


        doughnutlabels = [

        ["Android", "Web", "iOS", "COD"],

        ]
        doughnut = [

        [200, 400, 200, 200],

        ]


        pielabels = [

        ["COD","ONLINE"],
        ]



        pie = [

        [500,500],
        ]

        table = [
        {'name':"Top Categories","Orders":"Orders" ,"Amount":"Amount", },
        {'name':"Xiaomi Redmi K30 (32 Gb ram)","Orders":"690" ,"Amount":"800",},
        {'name':"Xiaomi Redmi K30 (32 Gb ram)","Orders":"690" ,"Amount":"800", },
        {'name':"Xiaomi Redmi K30 (32 Gb ram)","Orders":"690" ,"Amount":"800",},
        {'name':"Xiaomi Redmi K30 (32 Gb ram)","Orders":"690" , "Amount":"800", },
        {'name':"Xiaomi Redmi K30 (32 Gb ram)","Orders":"690" ,"Amount":"800", },
        {'name':"Xiaomi Redmi K30 (32 Gb ram)","Orders":"690" , "Amount":"800",},
        ]
        return JsonResponse({'chartlebels':chartlebels, 'chartdata':chartdata, 'dashboarddata':dashboarddata , 'doughnut':doughnut, 'doughnutlabels':doughnutlabels,  'pie':pie, 'pielabels':pielabels, 'table':table, }, status = status.HTTP_200_OK)


class CreateOrderAPI(APIView):
    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.AllowAny , )
    def post(self, request,  format=None):
        data = {}
        user = request.user
        data['orderBy'] = user
        if 'store' in request.data:
            storeObj =  Store.objects.get(pk =  request.data['store'])
            data['store'] = Store.objects.get(pk =  request.data['store'])
        if 'modeOfPayment' in request.data:
            data['paymentMode'] = request.data['modeOfPayment']
        if 'address' in request.data:
            if 'city' in request.data['address']:
                data['city'] = request.data['address']['city']
            if 'state' in request.data['address']:
                data['state'] =  request.data['address']['state']
            if 'landMark' in request.data['address']:
                data['landMark'] =  request.data['address']['landMark']
            if 'country' in request.data['address']:
                data['country'] =  request.data['address']['country']
            if 'pincode' in request.data['address']:
                data['pincode'] = request.data['address']['pincode']
            if 'mobileNo' in request.data['address']:
                data['mobileNo'] = request.data['address']['mobileNo']
            if 'street' in request.data['address']:
                data['street']  = request.data['address']['street']
        if 'billingAddress' in request.data:
            if 'city' in request.data['billingAddress']:
                data['billingCity'] =  request.data['billingAddress']['city']
            if 'state' in request.data['billingAddress']:
                data['billingState'] = request.data['billingAddress']['state']
            if 'landMark' in request.data['billingAddress']:
                data['billingLandMark'] = request.data['billingAddress']['landMark']
            if 'country' in request.data['billingAddress']:
                data['billingCountry'] = request.data['billingAddress']['country']
            if 'pincode' in request.data['billingAddress']:
                data['billingPincode'] = request.data['billingAddress']['pincode']
            if 'street' in request.data['billingAddress']:
                data['billingStreet'] = request.data['billingAddress']['street']
        orderObj = Order(**data)
        orderObj.save()
        cartObj = Cart.objects.filter(user = user, store = storeObj)
        total=0
        shippingVal=0
        for i in cartObj:
            orderQtyObj = OrderQtyMap.objects.create(product = i.product, productVariant = i.productVariant, qty=i.qty, orderBy = user, store = storeObj, productName = i.productVariant.displayName, sellingPrice = i.productVariant.sellingPrice, shippingPrice = i.productVariant.shippingCost,order = orderObj)
            tot = 0
            shipping = 0
            tot = i.qty * i.productVariant.sellingPrice
            shipping = i.qty * i.productVariant.shippingCost
            total+=tot
            shippingVal+=shipping
            orderQtyObj.save()
            i.delete()

        orderObj.total = total
        orderObj.shippingPrice = shippingVal
        totVal = orderObj.total + orderObj.shippingPrice
        if 'coupon' in request.data:
            promoObj = PromocodeV2.objects.get( pk = int(request.data['coupon']))
            orderObj.couponDiscount = promoObj.discount
            orderObj.coupon = promoObj.pk
            orderObj.discount = (float(promoObj.discount)/100)*float(totVal)
        else:
            orderObj.discount = 0
        orderObj.totalAmount = totVal - orderObj.discount
        orderObj.save()
        return JsonResponse({'pk':orderObj.pk}, status = status.HTTP_200_OK)
